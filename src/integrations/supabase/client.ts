
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wymipfguuzpsacqrsalh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind5bWlwZmd1dXpwc2FjcXJzYWxoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4NzA1MjUsImV4cCI6MjA2MDQ0NjUyNX0.T9pyeXpnbN2Fn2ZtWK4Gwu9ou6tQQ-iMzGlhh5KrCx8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create a settings provider to access application settings
export const getAppSettings = async () => {
  try {
    // First, check if there are any settings records
    const { data: settingsExist, error: checkError } = await supabase
      .from('app_settings')
      .select('id')
      .limit(1);
    // console.log("settingExist", settingsExist, checkError);

    if (checkError) {
      console.error("Error checking if settings exist:", checkError);
      return null;
    }

    // If no settings exist, create default settings
    if (!settingsExist || settingsExist.length === 0) {
      const defaultSettings = {
        site_name: 'SimolyAI',
        site_description: 'Piattaforma di analisi con AI',
        contact_email: 'info@simolyai.com',
        site_url: null,
        logo: null,
        favicon: null,
        primary_color: '#9b87f5',
        secondary_color: '#7E69AB',
        accent_color: '#E5DEFF',
        font_family: 'poppins',
        font_size: 'medium',
        button_style: 'rounded',
        enable_registration: true,
        require_email_verification: true,
        max_storage_per_user: 100
      };

      const { error: insertError } = await supabase
        .from('app_settings')
        .insert(defaultSettings);

      if (insertError) {
        console.error("Error creating default settings:", insertError);
      }
    }


    // Get the settings
    const { data, error } = await supabase
      .from('app_settings')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (error) {
      console.error("Error fetching app settings:", error);
      return null;
    }

    return data;
  } catch (error) {
    console.error("Failed to load app settings:", error);
    return null;
  }
};

// Save app settings
export const saveAppSettings = async (settings: any) => {
  try {
    console.log("Saving app settings to Supabase:", settings);

    // First get existing settings to check if we need to update or insert
    const { data: existingSettings } = await supabase
      .from('app_settings')
      .select('id')
      .limit(1);

    let operation;
    let target;

    if (existingSettings && existingSettings.length > 0) {
      operation = 'update';
      target = existingSettings[0].id;
    } else {
      operation = 'insert';
      target = null;
    }

    const settingsData = {
      site_name: settings.siteName,
      site_description: settings.siteDescription,
      contact_email: settings.contactEmail,
      site_url: settings.siteUrl,
      logo: settings.logo,
      favicon: settings.favicon,
      primary_color: settings.primaryColor,
      secondary_color: settings.secondaryColor,
      accent_color: settings.accentColor,
      font_family: settings.fontFamily,
      font_size: settings.fontSize,
      button_style: settings.buttonStyle,
      enable_registration: settings.enableRegistration,
      require_email_verification: settings.requireEmailVerification,
      max_storage_per_user: settings.maxStoragePerUser,
      updated_at: new Date().toISOString()
    };

    let result;

    if (operation === 'update' && target) {
      result = await supabase
        .from('app_settings')
        .update(settingsData)
        .eq('id', target)
        .select();
    } else {
      result = await supabase
        .from('app_settings')
        .insert(settingsData)
        .select();
    }

    if (result.error) {
      console.error("Error saving app settings:", result.error);
      return { success: false, error: result.error };
    }

    // After saving settings, apply them immediately
    applySettings(settings);

    return { success: true, data: result.data };
  } catch (error) {
    console.error("Failed to save app settings:", error);
    return { success: false, error };
  }
};

// Apply settings to the current page without requiring a reload
const applySettings = (settings: any) => {
  // Apply color settings
  document.documentElement.style.setProperty('--primary-color', settings.primaryColor);
  document.documentElement.style.setProperty('--secondary-color', settings.secondaryColor);
  document.documentElement.style.setProperty('--accent-color', settings.accentColor);

  // Apply font family
  document.documentElement.style.setProperty('--font-family', settings.fontFamily);

  // Apply button style
  document.documentElement.style.setProperty('--button-style', settings.buttonStyle);

  // Apply font size
  const fontSizeClass = `font-size-${settings.fontSize || 'medium'}`;
  document.body.classList.remove('font-size-small', 'font-size-medium', 'font-size-large');
  document.body.classList.add(fontSizeClass);

  // Apply logo if set
  if (settings.logo) {
    const logoElements = document.querySelectorAll('.site-logo');
    logoElements.forEach((el: Element) => {
      if (el instanceof HTMLImageElement) {
        el.src = settings.logo;
      }
    });
  }

  // Apply favicon if set
  if (settings.favicon) {
    const faviconLink = document.querySelector("link[rel*='icon']") || document.createElement('link');
    faviconLink.setAttribute('rel', 'shortcut icon');
    faviconLink.setAttribute('href', settings.favicon);
    document.head.appendChild(faviconLink);
  }
};

// Initialize application with settings
export const initializeApp = async () => {
  const settings = await getAppSettings();
  if (settings) {
    // Convert database format to frontend format for applying settings
    const frontendSettings = {
      siteName: settings.site_name,
      siteDescription: settings.site_description || '',
      contactEmail: settings.contact_email || '',
      siteUrl: settings.site_url || '',
      logo: settings.logo || null,
      favicon: settings.favicon || null,
      primaryColor: settings.primary_color,
      secondaryColor: settings.secondary_color,
      accentColor: settings.accent_color,
      fontFamily: settings.font_family,
      fontSize: settings.font_size,
      buttonStyle: settings.button_style,
      enableRegistration: settings.enable_registration !== undefined ? settings.enable_registration : true,
      requireEmailVerification: settings.require_email_verification !== undefined ? settings.require_email_verification : true,
      maxStoragePerUser: settings.max_storage_per_user || 100
    };

    // Apply the settings immediately
    applySettings(frontendSettings);
  }
};

// Add event listener to apply settings when DOM is loaded
if (typeof window !== 'undefined') {
  window.addEventListener('DOMContentLoaded', () => {
    initializeApp();
  });
}
